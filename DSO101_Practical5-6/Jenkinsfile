pipeline {
    agent any
    
    environment {
        DOCKER_USERNAME = 'tandinomu'  // Make sure this matches your Docker Hub username exactly!
        IMAGE_NAME = 'my-jenkins-pipeline-app'
        CONTAINER_NAME = 'my-jenkins-app'
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Build Docker Image') {
            steps {
                sh '''
                    echo "Building Docker image..."
                    docker build -t ${IMAGE_NAME}:${BUILD_NUMBER} .
                    docker tag ${IMAGE_NAME}:${BUILD_NUMBER} ${IMAGE_NAME}:latest
                    docker tag ${IMAGE_NAME}:latest ${DOCKER_USERNAME}/${IMAGE_NAME}:latest
                    docker tag ${IMAGE_NAME}:latest ${DOCKER_USERNAME}/${IMAGE_NAME}:${BUILD_NUMBER}
                    
                    echo "Images created:"
                    docker images | grep ${IMAGE_NAME}
                '''
            }
        }
        
        stage('Test Container') {
            steps {
                sh '''
                    echo "Testing container..."
                    docker run -d --name test-${BUILD_NUMBER} -p 8080:80 ${IMAGE_NAME}:latest
                    sleep 10
                    curl -f http://localhost:8080 && echo "Container test passed"
                    docker stop test-${BUILD_NUMBER}
                    docker rm test-${BUILD_NUMBER}
                '''
            }
        }
        
        // DEBUG STAGE - Add this to see what's happening
        stage('Debug Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                        echo "=== DEBUG INFORMATION ==="
                        echo "Environment DOCKER_USERNAME: ${DOCKER_USERNAME}"
                        echo "Credentials DOCKER_USER: $DOCKER_USER"
                        echo "Are they the same? This is important!"
                        
                        echo "=== TESTING DOCKER LOGIN ==="
                        echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
                        
                        if [ $? -eq 0 ]; then
                            echo "Docker login successful"
                        else
                            echo "Docker login failed!"
                            exit 1
                        fi
                        
                        echo " === LOCAL IMAGES AVAILABLE ==="
                        docker images | grep ${DOCKER_USERNAME}
                    '''
                }
            }
        }
        
        stage('Push to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                        echo "Pushing to Docker Hub..."
                        
                        # Login to Docker Hub
                        echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
                        
                        # Important: Use DOCKER_USER (from credentials) instead of DOCKER_USERNAME (from environment)
                        # Re-tag images with the correct username from credentials
                        docker tag ${IMAGE_NAME}:latest $DOCKER_USER/${IMAGE_NAME}:latest
                        docker tag ${IMAGE_NAME}:latest $DOCKER_USER/${IMAGE_NAME}:${BUILD_NUMBER}
                        
                        # Push images
                        echo "Pushing $DOCKER_USER/${IMAGE_NAME}:${BUILD_NUMBER}..."
                        docker push $DOCKER_USER/${IMAGE_NAME}:${BUILD_NUMBER}
                        
                        echo "Pushing $DOCKER_USER/${IMAGE_NAME}:latest..."
                        docker push $DOCKER_USER/${IMAGE_NAME}:latest
                        
                        if [ $? -eq 0 ]; then
                            echo "Successfully pushed to Docker Hub!"
                            echo "Check: https://hub.docker.com/r/$DOCKER_USER/${IMAGE_NAME}"
                        else
                            echo "Push failed!"
                            exit 1
                        fi
                    '''
                }
            }
        }
        
        stage('Deploy Container') {
            steps {
                sh '''
                    echo "Deploying container..."
                    docker stop ${CONTAINER_NAME} || true
                    docker rm ${CONTAINER_NAME} || true
                    
                    # Use the image from Docker Hub that was just pushed
                    docker run -d --name ${CONTAINER_NAME} -p 3000:80 --restart unless-stopped ${DOCKER_USERNAME}/${IMAGE_NAME}:${BUILD_NUMBER}
                    echo "Deployed! Access at http://localhost:3000"
                    
                    # Show running container
                    docker ps | grep ${CONTAINER_NAME}
                '''
            }
        }
    }
    
    post {
        always {
            sh 'docker system prune -f || true'
        }
        success {
            echo '''
            SUCCESS! 
            Pipeline completed successfully!
            Image pushed to Docker Hub
            Container deployed and running
            Access: http://localhost:3000
            Docker Hub: https://hub.docker.com/r/tandinomu/my-jenkins-pipeline-app
            '''
        }
        failure {
            echo '''
            Pipeline failed!
            Check the debug stage output for details.
            Common issues:
            - Docker Hub credentials incorrect
            - Username mismatch between environment and credentials
            - Network connectivity to Docker Hub
            '''
        }
    }
}